* test script
#!/bin./sh
set -eu
D=$HOME/xsrc/llpp/

shell() {
    echo shell
    local t=/tmp/main.ppx
    cd $D
    ocamlc -depend -one-line -bytecode \
           -ppx 'tee $0 >$2 <$1' main.ml >/tmp/deps_shell
    ocamlc -c -I build -I build/wsi/x11 -I build/lablGL -o /tmp/main.cmo \
           -impl $t
}

direct() {
    echo direct
    cd $D
    ocamlc -depend -one-line -bytecode main.ml >/tmp/deps_direct
    ocamlc -c -I build -I build/wsi/x11 -I build/lablGL -o /tmp/main.cmo main.ml
}

C() {
    echo C
    local t=/tmp/main.ppx
    cd $D
    ocamlc -depend -one-line -bytecode \
           -ppx "$D/test/depppx $t" main.ml >/tmp/deps_C
    ocamlc -c -I build -I build/wsi/x11 -I build/lablGL -o /tmp/main.cmo \
           -impl $t
}

case "${1-}" in
    shell) shell;;
    direct) direct;;
    C) C;;
    *) direct;;
esac
* C helper
/* taken from COPY_FILE_RANGE(2) */
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <unistd.h>

int
main(int argc, char **argv)
{
    int fd_in, fd_out;
    struct stat stat;
    off64_t len, ret;
    int i;
    char *names[] = { argv[1], argv[3] };

    if (argc != 4) {
        fprintf(stderr, "usage: %d %s <dest1> <source> <dest2>\n",
                argc, argv[0]);
        exit(EXIT_FAILURE);
    }

    fd_in = open(argv[2], O_RDONLY);
    if (fd_in == -1) {
        perror("open (argv[2])");
        exit(EXIT_FAILURE);
    }

    if (fstat(fd_in, &stat) == -1) {
        perror("fstat");
        exit(EXIT_FAILURE);
    }

    for (i = 0; i < 2; ++i) {
        len = stat.st_size;

        fd_out = open(names[i], O_CREAT | O_WRONLY | O_TRUNC, 0644);
        if (fd_out == -1) {
            perror("open (names[])");
            exit(EXIT_FAILURE);
        }

        do {
            ret = copy_file_range(fd_in, NULL, fd_out, NULL, (size_t) len, 0);
            if (ret == -1) {
                perror("copy_file_range");
                exit(EXIT_FAILURE);
            }

            len -= ret;
        } while (len > 0 && ret > 0);
        close(fd_out);
        if (!i) {
            if (lseek (fd_in, 0, SEEK_SET))
                perror ("lseek");
        }
    }

    exit(EXIT_SUCCESS);
}
/*
  Local Variables:
  compile-command: "clang -D_GNU_SOURCE -Weverything -pedantic -Werror -o depppx deppx.c"
  End:
*/

* Shell helper
